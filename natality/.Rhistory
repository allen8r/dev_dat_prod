getwd()
setwd("~/R")
setwd("~/workspace/R")
install.packages("swirl")
install.packages("swirl")
library(swirl)
library(swirl)
rm(list=ls())
ls()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
q()
library(swirl)
swirl()
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[[1]]}, c(8, 4, 0))
evaluate(function(x){x[[length(x)]]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("How", "are", "you", "today?")
submit()
mad_libs("Foster City", "ho hum", "boat")
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
getpwd()
getwd()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollutiion$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "gyeserplot.png")
dev.copy(png, file = "geyeserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars@speed), max(cars$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
dev.cur()
dev.close()
dev.off()
hist(airquality$Ozone)
dev.off()
dev.set(2)
dev.cur()
table(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par$lty
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
?points
points(may$Wind, may$Ozone, col = "blue", pch = "triangle")
?pch
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1), pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
exit
quit()
head(mtcars)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat = 37.4220041,lng = -122.0862462, popup="Googleplex")
my_map <- my_map %>%
addMarkers(lat = 37.4220041,lng = -122.0862462, popup="Googleplex")
my_map
#my_map <- my_map %>%
#    addMarkers(lat=37.4220041, lng=-122.0862462, popup="Googleplex")
#my_map
set.seed(2016-11-07)
df <- data.frame(lat = runif(20, min=37.2, max=37.9),
lng = runif(20, min=-122.0, max=-122.8))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
#my_map <- my_map %>%
#    addMarkers(lat=37.4220041, lng=-122.0862462, popup="Googleplex")
#my_map
set.seed(2016-11-07)
df <- data.frame(lat = runif(20, min=37.2, max=37.9),
lng = runif(20, min=-122.8, max=-122.0))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(leaflet)
inputPanel(
h3("November 8, 2016"),
selectInput("restaurant", label = "Restaurant:",
choices = c("In-N-Out"="in-n-out",
"Habit Burger"="habit",
"The Counter"="counter",
"Burger King"="burgerking",
"Five Guys"="fiveguys"),
selected = "in-n-out")
)
renderPlot({
leaflet() %>%
addTiles()
})
library(shiny)
library(leaflet)
inputPanel(
h3("November 8, 2016"),
selectInput("restaurant", label = "Restaurant:",
choices = c("In-N-Out"="in-n-out",
"Habit Burger"="habit",
"The Counter"="counter",
"Burger King"="burgerking",
"Five Guys"="fiveguys"),
selected = "in-n-out")
)
renderPlot({
leaflet() %>%
addTiles()
})
library(shiny)
library(leaflet)
inputPanel(
h3("November 8, 2016"),
selectInput("restaurant", label = "Restaurant:",
choices = c("In-N-Out"="in-n-out",
"Habit Burger"="habit",
"The Counter"="counter",
"Burger King"="burgerking",
"Five Guys"="fiveguys"),
selected = "in-n-out")
)
renderPlot({
map <- leaflet() %>%
addTiles()
map
})
locations <- data.frame(
lat = c(37.5119694,
37.5479937,
37.5347488,
37.5409048,
37.5558328
),
lng = c(-122.2616835,
-122.3010797,
-122.2990933,
-122.3032659,
-122.2763042
),
url = c('<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3164.726086662186!2d-122.26240624605903!3d37.51437804555627!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x3ef218c5afdca519!2sIn-N-Out+Burger!5e0!3m2!1sen!2sus!4v1478636708595" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>',
'<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d1118.443765186986!2d-122.2917240892321!3d37.54477424585396!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x849220d74e6091e4!2sThe+Habit+Burger+Grill!5e0!3m2!1sen!2sus!4v1478636668733" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>',
'<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d940.6075080345933!2d-122.29897249405751!3d37.53588333402863!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x45142e3ff6860237!2sThe+Counter+San+Mateo!5e0!3m2!1sen!2sus!4v1478636635594" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>',
'<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d559.245161802368!2d-122.30250201335465!3d37.54167083725096!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0xc30d5cfe7405a0ed!2sBurger+King!5e0!3m2!1sen!2sus!4v1478636578110" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>',
'<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d1118.2553111995967!2d-122.27517968701704!3d37.55733364461436!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0xc1c01cf146a8fb31!2sFive+Guys+Burgers+and+Fries!5e0!3m2!1sen!2sus!4v1478636503769" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>'
))
locations[1]
locations[[1]
]
str(locations)
locations[1,]
help leafletOutput
?leafletOutput
locations <- data.frame(
name = c("In-N-Out Burger",
"The Habit Burger",
"The Counter",
"Burger King",
"Five Guys Burger"),
lat = c(37.5119694,
37.5479937,
37.5347488,
37.5409048,
37.5558328
),
lng = c(-122.2616835,
-122.3010797,
-122.2990933,
-122.3032659,
-122.2763042
),
link = c("https://www.yelp.com/biz/in-n-out-burger-san-carlos",
"https://www.yelp.com/biz/the-habit-burger-grill-san-mateo",
"https://www.yelp.com/biz/the-counter-san-mateo-san-mateo-2",
"https://www.yelp.com/biz/burger-king-san-mateo-2",
"https://www.yelp.com/biz/five-guys-burgers-and-fries-foster-city")
)
html_text <- paste("🍔 <a href='", locations[1,]$link,"' target='_blank'>", locations[1,]$name," on Yelp</a> 😋")
html_text
html_text <- paste("🍔 <a href='", locations[1,]$link,"' target='_blank'>", locations[1,]$name," on Yelp</a> 😋", sep = "")
html_text
setwd("~/Projects/developing-data-products/dev_dat_prod/mobsub/mobile_subscribers")
shiny::runApp()
runApp()
ggplotly()
runApp()
runApp()
runApp()
install.packages("ggthemes")
runApp()
runApp()
mobsub <- data.frame(
Year = c(2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,
2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004
),
Subscribers = c(7443000000,7268000000,6931000000,6627000000,6264000000,
5889000000,5297000000,4635000000,4028000000,3368000000,
2744000000,2205000000,1760000000,
338031000,323728000,316204000,305743000,304881000,
297268000,285118000,274283000,261300000,249300000,
229600000,203700000,184819000
),
Region = c("Global","Global","Global","Global","Global","Global","Global",
"Global","Global","Global","Global","Global","Global",
"US","US","US","US","US","US","US","US","US","US","US","US","US"
)
)
str(mobsub)
mobsub[mobsub$Region == input$region, ]
mobsub[mobsub$Region == "US", ]
mobsub[mobsub$Region == "Global", ]
runApp()
runApp()
library(plotly)
df <- mobsub[mobsub$Region == "Global", ]
ggplotly(df)
ggplot(df)
ggplot
ggplotly
runApp()
plot_ly(data=df_mobsub, x=~Year, y=~Subscribers,
type="scatter", mode="lines")
plot_ly(data=df, x=~Year, y=~Subscribers,
type="scatter", mode="lines")
df <- mobsub[mobsub$Region == c("Global","US") ]
df <- mobsub[mobsub$Region == list("Global","US") ]
plot_ly(data=mobsub, x=~Year, y=~Subscribers,
type="scatter", mode="lines")
plot_ly(data=mobsub, x=~Year, y=~Subscribers,
type="scatter", mode="lines",split=~Region)
runApp()
runApp()
data(DrinksWages)
plot(DrinksWages)
# plot proportion sober vs. wage | class
with(DrinksWages, plot(wage, sober/n, col=c("blue","red","green")[class]))
# fit logistic regression model of sober on wage
mod.sober <- glm(cbind(sober, n) ~ wage, family=binomial, data=DrinksWages)
summary(mod.sober)
op <- par(mfrow=c(2,2))
plot(mod.sober)
par(op)
library(HistData)
data(DrinksWages)
plot(DrinksWages)
# plot proportion sober vs. wage | class
with(DrinksWages, plot(wage, sober/n, col=c("blue","red","green")[class]))
# fit logistic regression model of sober on wage
mod.sober <- glm(cbind(sober, n) ~ wage, family=binomial, data=DrinksWages)
summary(mod.sober)
op <- par(mfrow=c(2,2))
plot(mod.sober)
par(op)
mod.sober <- glm(cbind(sober, n) ~ wage, family=binomial, data=DrinksWages)
op <- par(mfrow=c(2,2))
plot(mod.sober)
mod.sober <- glm(cbind(sober, n) ~ wage, family=binomial, data=DrinksWages)
op <- par(mfrow=c(2,2))
plot(mod.sober)
plot(DrinksWages)
data(Galton)
with(Galton,
{
sunflowerplot(parent,child, xlim=c(62,74), ylim=c(62,74))
reg <- lm(child ~ parent)
abline(reg)
lines(lowess(parent, child), col="blue", lwd=2)
if(require(car)) {
dataEllipse(parent,child, xlim=c(62,74), ylim=c(62,74), plot.points=FALSE)
}
})
?read.csv
getwd()
setwd("/home/alau/Projects/developing-data-products/dev_dat_prod/taxcollect/")
taxes <- read.csv("TC1500A1.dat", header=TRUE, sep="|")
str(taxes)
dim(taxes)
summary(taxes)
library(googleVis)
bartax <- gvisBarChart(taxes)
plot(bartax)
stTaxes <- taxes[taxes$ST, taxes$GOVTAX, taxes$AMOUNT, taxes$AMOUNT_F ]
stTaxes <- data.frame(taxes$ST, taxes$GOVTAX, taxes$AMOUNT, taxes$AMOUNT_F)
str(stTaxes)
colTaxes <- gvisColumnChart(stTaxes)
plot(colTaxes)
colTaxes <- colTaxes[, !(names(stTaxes)%in% c("taxes.GOVTAX", "taxes.AMOUNT_F"))]
names(stTaxes)
colTaxes <- colTaxes[, !(names(stTaxes) == "taxes.AMOUNT_F")]
colTaxes <- colTaxes[ , !(names(stTaxes) == "taxes.AMOUNT_F")]
colTaxes <- subset(colTaxes, select = c(taxes.ST, taxes.GOVTAX, taxes.AMOUNT))
?subset
stTaxes <- data.frame(taxes$ST, taxes$GOVTAX, taxes$AMOUNT)
colTaxes <- gvisColumnChart(stTaxes)
plot(colTaxes)
stTaxes <- data.frame(taxes$ST, taxes$AMOUNT)
plot(colTaxes)
setwd("/home/alau/Projects/developing-data-products/dev_dat_prod/natality/")
natality <- read.csv("NCHS_natality.csv")
str(natality)
str(natality$Race)
plot(Year, Birth.Rate, data=natality, split=Race)
plot(natality$Year, natality$Birth.Rate, split=natality$Race)
gvisLineChart(natality, xvar=Year, yvar=Birth.Rate)
gvisLineChart(natality, xvar=natality$Year, yvar=natality$Birth.Rate)
gvisLineChart(natality)
gvisLineChart(natality, xvar="Year", yvar=c("Birth.Rate","Live.Birth")
)
str(natality)
gvisLineChart(natality, xvar="Year", yvar=c("Birth.Rate","Live.Births"))
library(googleVis)
gvisLineChart(natality, xvar="Year", yvar=c("Birth.Rate","Live.Births"))
